##################################################
# file: ExportServiceImplService_types.py
#
# schema types generated by "ZSI.generate.wsdl2python.WriteServiceModule"
#    /usr/bin/wsdl2py --complexType ExportService.wsdl
#
##################################################

import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED
from ZSI.generate.pyclass import pyclass_type

##############################
# targetNamespace
# http://export.ws.lockss.org/
##############################

class ns0:
    targetNamespace = "http://export.ws.lockss.org/"

    class createExportFiles_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://export.ws.lockss.org/"
        type = (schema, "createExportFiles")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.createExportFiles_Def.schema
            TClist = [GTD("http://export.ws.lockss.org/","exportServiceParams",lazy=False)(pname="arg0", aname="_arg0", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._arg0 = None
                    return
            Holder.__name__ = "createExportFiles_Holder"
            self.pyclass = Holder

    class exportServiceParams_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://export.ws.lockss.org/"
        type = (schema, "exportServiceParams")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.exportServiceParams_Def.schema
            TClist = [ZSI.TC.String(pname="auid", aname="_auid", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="compress", aname="_compress", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="excludeDirNodes", aname="_excludeDirNodes", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="filePrefix", aname="_filePrefix", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://export.ws.lockss.org/","typeEnum",lazy=False)(pname="fileType", aname="_fileType", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="maxSize", aname="_maxSize", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="maxVersions", aname="_maxVersions", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://export.ws.lockss.org/","filenameTranslationEnum",lazy=False)(pname="xlateFilenames", aname="_xlateFilenames", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._auid = None
                    self._compress = None
                    self._excludeDirNodes = None
                    self._filePrefix = None
                    self._fileType = None
                    self._maxSize = None
                    self._maxVersions = None
                    self._xlateFilenames = None
                    return
            Holder.__name__ = "exportServiceParams_Holder"
            self.pyclass = Holder

    class createExportFilesResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://export.ws.lockss.org/"
        type = (schema, "createExportFilesResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.createExportFilesResponse_Def.schema
            TClist = [GTD("http://export.ws.lockss.org/","exportServiceWsResult",lazy=False)(pname="return", aname="_return", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = None
                    return
            Holder.__name__ = "createExportFilesResponse_Holder"
            self.pyclass = Holder

    class exportServiceWsResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://export.ws.lockss.org/"
        type = (schema, "exportServiceWsResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.exportServiceWsResult_Def.schema
            TClist = [ZSI.TC.String(pname="auId", aname="_auId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://export.ws.lockss.org/","dataHandlerWrapper",lazy=False)(pname="dataHandlerWrappers", aname="_dataHandlerWrappers", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._auId = None
                    self._dataHandlerWrappers = []
                    return
            Holder.__name__ = "exportServiceWsResult_Holder"
            self.pyclass = Holder

    class dataHandlerWrapper_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://export.ws.lockss.org/"
        type = (schema, "dataHandlerWrapper")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.dataHandlerWrapper_Def.schema
            TClist = [ZSI.TC.Base64String(pname="dataHandler", aname="_dataHandler", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="size", aname="_size", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._dataHandler = None
                    self._name = None
                    self._size = None
                    return
            Holder.__name__ = "dataHandlerWrapper_Holder"
            self.pyclass = Holder

    class lockssWebServicesFaultInfo_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://export.ws.lockss.org/"
        type = (schema, "lockssWebServicesFaultInfo")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.lockssWebServicesFaultInfo_Def.schema
            TClist = [ZSI.TC.String(pname="message", aname="_message", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._message = None
                    return
            Holder.__name__ = "lockssWebServicesFaultInfo_Holder"
            self.pyclass = Holder

    class typeEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://export.ws.lockss.org/"
        type = (schema, "typeEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class filenameTranslationEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://export.ws.lockss.org/"
        type = (schema, "filenameTranslationEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class createExportFiles_Dec(ElementDeclaration):
        literal = "createExportFiles"
        schema = "http://export.ws.lockss.org/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://export.ws.lockss.org/","createExportFiles")
            kw["aname"] = "_createExportFiles"
            if ns0.createExportFiles_Def not in ns0.createExportFiles_Dec.__bases__:
                bases = list(ns0.createExportFiles_Dec.__bases__)
                bases.insert(0, ns0.createExportFiles_Def)
                ns0.createExportFiles_Dec.__bases__ = tuple(bases)

            ns0.createExportFiles_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "createExportFiles_Dec_Holder"

    class createExportFilesResponse_Dec(ElementDeclaration):
        literal = "createExportFilesResponse"
        schema = "http://export.ws.lockss.org/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://export.ws.lockss.org/","createExportFilesResponse")
            kw["aname"] = "_createExportFilesResponse"
            if ns0.createExportFilesResponse_Def not in ns0.createExportFilesResponse_Dec.__bases__:
                bases = list(ns0.createExportFilesResponse_Dec.__bases__)
                bases.insert(0, ns0.createExportFilesResponse_Def)
                ns0.createExportFilesResponse_Dec.__bases__ = tuple(bases)

            ns0.createExportFilesResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "createExportFilesResponse_Dec_Holder"

    class LockssWebServicesFault_Dec(ElementDeclaration):
        literal = "LockssWebServicesFault"
        schema = "http://export.ws.lockss.org/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://export.ws.lockss.org/","LockssWebServicesFault")
            kw["aname"] = "_LockssWebServicesFault"
            if ns0.lockssWebServicesFaultInfo_Def not in ns0.LockssWebServicesFault_Dec.__bases__:
                bases = list(ns0.LockssWebServicesFault_Dec.__bases__)
                bases.insert(0, ns0.lockssWebServicesFaultInfo_Def)
                ns0.LockssWebServicesFault_Dec.__bases__ = tuple(bases)

            ns0.lockssWebServicesFaultInfo_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "LockssWebServicesFault_Dec_Holder"

# end class ns0 (tns: http://export.ws.lockss.org/)
