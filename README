This is the source tree for the LOCKSS daemon.
See http://www.lockss.org/ for information about the project.

Obtaining Source
----------------
A one-time copy can be obtained with wget or curl:

wget https://github.com/lockss/lockss-daemon/archive/master.zip`
or
curl -L -o master.zip https://github.com/lockss/lockss-daemon/archive/master.zip`

A buildable snapshot can be obtained by cloning the master branch:
git clone --depth 1 --branch master https://github.com/lockss/lockss-daemon.git`

To establish a local copy of the LOCKSS git repository you can
use the “git clone” command to establish the repository and “git pull” to pull in updates:

git clone https://github.com/lockss/lockss-daemon.git` # to get working copy
git pull` # to update 

Prerequisites
-------------

Installed Packages:

- Sun or Open JDK 8.

- Ant 1.7.1 or greater.  (http://ant.apache.org/)

- Python 2.5 or greater (but not 3.x).

(On Debian or Ubuntu,
  apt-get install python sun-java7-jdk ant ant-optional
)

Other Prerequisites:

- Junit is included in the LOCKSS source distribution, but the Ant targets
  that invoke JUnit (test-xxx) require the JUnit jar to be on Ant's
  classpath.  The easiest way to do that is to copy lib/junit.jar into
  Ant's lib directory (<ant-install-dir>/ant/lib).

- For some of the tools the JAVA_HOME env var must be set to the directory
  in which the JDK is installed.  (I.e., it's expected that tools.jar can
  be found in ${JAVA_HOME}/lib)


To Build
--------

ant test-all		Builds the system and runs all unit tests
ant test-one -Dclass=org.lockss.foo.TestBar
			        Builds the system and runs one JUnit test class.
ant -projecthelp	Lists other build options

How to Build Plugin SciELO
--------
É necessário gerar os arquivos .class, portanto use o comando ant para fazê-lo. O arquivo build.xml contêm as funções para a construção das classes e suas dependências.
Execute o comando: ant compile-plugins
Verifique se os arquivos foram criados baseado nos arquivos .java.
Origem dos dados para a construção do plugin
$ ls -lha plugins/src/org/lockss/plugin/scielo/
Destino dos arquivos class
$ ls plugins/classes/org/lockss/plugin/scielo/

Uma vez compilados os arquivos vamos gerar o arquivo .jar. Importante que a variável JAVA_HOME esteja setada
Execute o comando:
$ test/scripts/genkey 
Full Name (i.e., First Last-lockss): SciELO Lockss
Alias (i.e., flast-lockss): SciELO-Lockss
Passphrase: <digite a senha>
   Confirm: <confirme a senha>
   
Warning:
O armazenamento de chaves JKS usa um formato proprietário. É recomendada a migração para PKCS12, que é um formato de padrão industrial que usa "keytool -importkeystore -srckeystore scielo-lockss.keystore -destkeystore scielo-lockss.keystore -deststoretype pkcs12".
Certificado armazenado no arquivo <scielo-lockss.cer>

Warning:
O armazenamento de chaves JKS usa um formato proprietário. É recomendada a migração para PKCS12, que é um formato de padrão industrial que usa "keytool -importkeystore -srckeystore scielo-lockss.keystore -destkeystore scielo-lockss.keystore -deststoretype pkcs12".
Displaying cert...

Import certificate into LOCKSS public keystore? (Y/N) [Y]: 

Será gerado o keystore na raiz e terá o nome do <alias>-keystore.

Execute o comando abaixo para criar o arquivo .jar
$ test/scripts/genplugin --jar SciELOPlugin.jar --alias SciELO-Lockss --keystore ./SciELO-Lockss.keystore  --titledb tdb/scielo.xml --plugin plugins/classes/org/lockss/plugin/scielo/SciELOPlugin.xml
Pedirá a senha definida no genkey.
Por fim é criado o arquivo SciELOPlugin.jar no diretório plugins/jars/
